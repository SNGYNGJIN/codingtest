<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="com.obiscr.chatgpt.settings.EasyCodeState">
    <option name="projectFiles" value="$PROJECT_DIR$/src/swea/d2/간단한_소인수_분해_1945/Solution.java;C:/Users/Jin/Desktop/study/codingtest/src/swea/d2/간단한_소인수_분해_1945/Solution.md;C:/Users/Jin/Desktop/study/codingtest/src/swea/d2/백만장자_프로젝트_1859/Solution.java;C:/Users/Jin/Desktop/study/codingtest/src/swea/d2/백만장자_프로젝트_1859/Solution.md;C:/Users/Jin/Desktop/study/codingtest/src/Main.java" />
    <option name="forceFullIndex" value="false" />
    <option name="fileSummaryMaps" value="{&quot;C:/Users/Jin/Desktop/study/codingtest&quot;:&quot;{\&quot;/src/swea/d2/백만장자_프로젝트_1859/Solution.md\&quot;:\&quot;This file contains a solution to the \\\&quot;Billionaire Project\\\&quot; problem from SWEA (Samsung SW Expert Academy).\\n\\nKey points:\\n\\n- It describes the problem - a person can predict stock prices for N days and wants to maximize profits by buying low and selling high, within the constraints of only being able to buy up to 10 units per day.\\n\\n- It outlines the approach taken:\\n   - Track prices from N to N-1 to find the most expensive day\\n   - Buy on all days leading up to and including the most expensive day \\n   - Sell on the most expensive day\\n   - Repeat from step 1 for the remaining days\\n\\n- It provides pseudo-code to implement the solution:\\n   - Loop through prices to find maximum\\n   - Calculate total bought by summing previous days\\u0027 prices\\n   - Calculate profit as maximum price * days - total bought\\n\\nThe key functions of this file are:\\n\\n- Describing the problem \\n- Explaining the algorithmic approach taken\\n- Providing pseudo-code to implement the solution\\n\\nSo in summary, it analyzes a stock trading optimization problem, outlines an approach, and provides pseudo-code to programmatically solve it.\&quot;,\&quot;/src/swea/d2/간단한_소인수_분해_1945/Solution.java\&quot;:\&quot;This Java file contains a solution to the \\\&quot;간단한 소인수 분해\\\&quot; problem on SW Expert Academy.\\n\\nKey functions:\\n\\n- main(): The entry point of the program. It reads the test case count T from input, then loops T times to process each test case.\\n\\n- Scanner sc: Used to read input from System.in (standard input). \\n\\n- Looping while num is divisible by prime factors 2, 3, 5, 7, 11: Repeatedly divides num by the prime factor until it is no longer divisible, incrementing the count for that factor each time. This performs the prime factor decomposition.\\n\\n- System.out.println(): Prints the output for each test case in the required format, with the count of each prime factor. \\n\\n- It takes a single integer as input for each test case, performs prime factor decomposition, and outputs the count of each prime factor 2, 3, 5, 7, 11.\\n\\nSo in summary, it reads integer input, performs simple prime factor decomposition, and prints the results - solving the given problem on SWEA.\&quot;,\&quot;/src/swea/d2/백만장자_프로젝트_1859/Solution.java\&quot;:\&quot;This Java file contains a solution to a Swea (SW Expert Academy) problem called \\\&quot;백만장자 프로젝트\\\&quot; (Billionaire Project).\\n\\nKey things it does:\\n\\n- Reads test case input from a file instead of standard input by uncommenting the System.setIn line. This is for testing purposes.\\n\\n- Defines a Solution class with a main method to contain the problem solving logic\\n\\n- Reads the number of test cases T from standard input \\n\\n- Loops through each test case using a for loop from 1 to T\\n\\n- Reads the number of values n for each test case\\n\\n- Splits the next line of input into a string array and parses to an integer array arr\\n\\n- Finds the maximum value in the array by iterating from the end \\n\\n- Does not actually calculate the advantage, just prints the test case number \\n\\nKey functions:\\n\\n- main - Contains the overall problem solving logic\\n- Scanner - Used to read input from standard input\\n- BufferedReader - Used to read input lines \\n- split() - Splits a string into a string array \\n- parseInt() - Parses strings to integers\\n- println() - Prints output\\n\\nSo in summary, it reads Swea-style test case input, solves for each case by finding the max value, and prints the output.\&quot;,\&quot;/src/Main.java\&quot;:\&quot;This Java file contains a simple main method that defines the entry point of the application:\\n\\n- public class Main - Defines a public class called Main\\n\\n- public static void main(String[] args) - Defines the main method, which is the entry point for all Java applications. It is static so it can be called without creating an instance of the class, and returns void since it does not return anything. \\n\\n- main(String[] args) - Takes in a String array called args, which can be used to pass command line arguments to the program.\\n\\n- {} - The main method body, which currently contains no code.\\n\\nKey functions:\\n\\n- Defines the entry point of the Java application through the main method. This is where execution will start when the program is run.\\n\\n- Can accept command line arguments passed via the args parameter which could be used within the program. \\n\\n- Currently empty main method body - no functionality defined yet, this is just the skeleton class and method definition.\\n\\nSo in summary, this file defines a simple class with a main method that establishes the starting point for a Java application, but does not contain any other code or functionality yet. It sets up the basic structure to build the rest of the program.\&quot;,\&quot;/src/swea/d2/간단한_소인수_분해_1945/Solution.md\&quot;:\&quot;This file contains code for solving a problem on simple prime factor decomposition in Swea (Software Education Academy).\\n\\nKey points:\\n\\n- The problem asks to take a given number N and decompose it into its prime factors of 2, 3, 5, 7, 11 and output the exponents of each factor. \\n\\n- The approach is to repeatedly divide the number by each prime factor and increment a counter each time it is divisible. This gives the exponents of each factor.\\n\\n- The pseudo code shows this approach using while loops to divide the input by each factor (2, 3, 5 etc) and increment a count variable each time. \\n\\n- Once it is no longer divisible, it moves on to the next factor. This continues till all factors are checked. \\n\\n- After decomposing the full number, the count variables will hold the exponents of each prime factor. These are then outputted to solve the problem.\\n\\nKey functions:\\n\\n- Prime factor decomposition - Repeatedly dividing the number by prime factors \\n- Counting exponents - Using count variables to track exponent of each factor\\n- Output solution - Printing the exponent counts after full decomposition\\n\\nSo in summary, this file explains an approach to solve a simple prime factor decomposition problem through repeated division and counting exponents of factors.\&quot;}&quot;}" />
  </component>
</project>